{
    parserClass="com.fooock.solidity.lang.parser.SolidityParser"
    classHeader="header.txt"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Solidity"
    psiImplClassSuffix="Impl"
    psiPackage="com.fooock.solidity.lang.psi"
    psiImplPackage="com.fooock.solidity.lang.psi.impl"

    elementTypeHolderClass="com.fooock.solidity.lang.psi.SolidityTypes"
    elementTypeClass="com.fooock.solidity.lang.psi.SolidityElementType"
    tokenTypeClass="com.fooock.solidity.lang.psi.SolidityTokenType"

    tokens = [
        LBRACE             = '{'
        RBRACE             = '}'
        LBRACK             = '['
        RBRACK             = ']'
        LPAREN             = '('
        RPAREN             = ')'
        COLON              = ':'
        SEMICOLON          = ';'
        COMMA              = ','
        EQ                 = '=='
        ASSIGN             = '='
        NOT_EQ             = '!='
        NOT                = '!'
        PLUS_PLUS          = '++'
        PLUS_ASSIGN        = '+='
        PLUS               = '+'
        MINUS_MINUS        = '--'
        MINUS_ASSIGN       = '-='
        MINUS              = '-'
        COND_OR            = '||'
        BIT_OR_ASSIGN      = '|='
        COND_AND           = '&&'
        BIT_AND_ASSIGN     = '&='
        BIT_AND            = '&'
        BIT_OR             = '|'
        SHIFT_LEFT_ASSIGN  = '<<='
        SHIFT_LEFT         = '<<'
        LESS_OR_EQUAL      = '<='
        LESS               = '<'
        BIT_XOR_ASSIGN     = '^='
        BIT_XOR            = '^'
        MUL_ASSIGN         = '*='
        MUL                = '*'
        QUOTIENT_ASSIGN    = '/='
        QUOTIENT           = '/'
        REMAINDER_ASSIGN   = '%='
        REMAINDER          = '%'
        SHIFT_RIGHT_ASSIGN = '>>='
        SHIFT_RIGHT        = '>>'
        GREATER_OR_EQUAL   = '>='
        GREATER            = '>'
        SPACE              = 'regexp:\s+'
        IDENTIFIER         = 'regexp:[a-zA-Z_$][a-zA-Z_$0-9]*'
        PRAGMA_VERSION     = 'regexp:[0-9].[0-9].[0-9]+'
        STRING_LITERAL     = 'regexp:("([^"\r\n\\]|\\.)*")'
    ]
}

File ::= (PragmaDirective | ImportDirective)*

//
//  _ __  _ __ __ _  __ _ _ __ ___   __ _
// | '_ \| '__/ _` |/ _` | '_ ` _ \ / _` |
// | |_) | | | (_| | (_| | | | | | | (_| |
// | .__/|_|  \__,_|\__, |_| |_| |_|\__,_|
// | |               __/ |
// |_|              |___/
//

PragmaDirective ::= pragma PragmaEntity PragmaSemVersion ';'
PragmaEntity ::= IDENTIFIER
PragmaSemVersion ::= PragmaSymbol? PragmaVersionNumber
PragmaSymbol ::= ( '^' | '>' | '>=' | '<' | '<=' | '=' )
PragmaVersionNumber ::= PRAGMA_VERSION


//  _                            _
// (_)                          | |
//  _ _ __ ___  _ __   ___  _ __| |_ ___
// | | '_ ` _ \| '_ \ / _ \| '__| __/ __|
// | | | | | | | |_) | (_) | |  | |_\__ \
// |_|_| |_| |_| .__/ \___/|_|   \__|___/
//             | |
//             |_|

ImportDirective ::= (ImportSimple | ImportFrom | ImportComplex) ';'
ImportSimple ::= import STRING_LITERAL (as IDENTIFIER)?
ImportFrom ::= import ('*' | IDENTIFIER) (as IDENTIFIER)? from STRING_LITERAL
ImportComplex ::= import '{' IDENTIFIER (as IDENTIFIER)? (',' IDENTIFIER (as IDENTIFIER)? )* '}' from STRING_LITERAL

