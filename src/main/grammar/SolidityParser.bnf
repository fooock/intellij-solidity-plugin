{
    parserClass="com.fooock.solidity.lang.parser.SolidityParser"
    classHeader="header.txt"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Solidity"
    psiImplClassSuffix="Impl"
    psiPackage="com.fooock.solidity.lang.psi"
    psiImplPackage="com.fooock.solidity.lang.psi.impl"

    elementTypeHolderClass="com.fooock.solidity.lang.psi.SolidityTypes"
    elementTypeClass="com.fooock.solidity.lang.psi.SolidityElementType"
    tokenTypeClass="com.fooock.solidity.lang.psi.SolidityTokenType"

    tokens = [
        LBRACE             = '{'
        RBRACE             = '}'
        LBRACK             = '['
        RBRACK             = ']'
        LPAREN             = '('
        RPAREN             = ')'
        COLON              = ':'
        SEMICOLON          = ';'
        COMMA              = ','
        EQ                 = '=='
        ASSIGN             = '='
        NOT_EQ             = '!='
        NOT                = '!'
        PLUS_PLUS          = '++'
        PLUS_ASSIGN        = '+='
        PLUS               = '+'
        MINUS_MINUS        = '--'
        MINUS_ASSIGN       = '-='
        MINUS              = '-'
        COND_OR            = '||'
        BIT_OR_ASSIGN      = '|='
        COND_AND           = '&&'
        BIT_AND_ASSIGN     = '&='
        BIT_AND            = '&'
        BIT_OR             = '|'
        SHIFT_LEFT_ASSIGN  = '<<='
        SHIFT_LEFT         = '<<'
        LESS_OR_EQUAL      = '<='
        LESS               = '<'
        BIT_XOR_ASSIGN     = '^='
        BIT_XOR            = '^'
        MUL_ASSIGN         = '*='
        MUL                = '*'
        QUOTIENT_ASSIGN    = '/='
        QUOTIENT           = '/'
        REMAINDER_ASSIGN   = '%='
        REMAINDER          = '%'
        SHIFT_RIGHT_ASSIGN = '>>='
        SHIFT_RIGHT        = '>>'
        GREATER_OR_EQUAL   = '>='
        GREATER            = '>'
        SPACE              = 'regexp:\s+'
        IDENTIFIER         = 'regexp:[a-zA-Z_$][a-zA-Z_$0-9]*'
        PRAGMA_VERSION     = 'regexp:[0-9].[0-9].[0-9]+'
        STRING_LITERAL     = 'regexp:("([^"\r\n\\]|\\.)*")'
        COMMENT            = 'regexp:\\*[\s\S]*?\*/|([^\\:]|^)//.*$|(//.*)'
        DELETE_OPERATOR    = 'delete'
        TILDE              = '~'
        EXPONENT           = '**'
        HEX_NUMBER         = 'regexp:(0x[0-9a-fA-F]+)|(hex"([0-9a-fA-F]+)")'
        DECIMAL_NUMBER     = 'regexp:[0-9]+(\.[0-9]*)?([eE][0-9]+)?'

        // FIXED_TYPE_NUMBER  = 'regexp:fixed(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)x[0-80])'
        // UFIXED_TYPE_NUMBER = 'regexp:ufixed(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)x[0-80])'
    ]
    extends(".*Expression")=Expression
    extends(".*TypeName")=TypeName
}

File ::= (PragmaDirective | ImportDirective | ContractStructure)*

//
//  _ __  _ __ __ _  __ _ _ __ ___   __ _
// | '_ \| '__/ _` |/ _` | '_ ` _ \ / _` |
// | |_) | | | (_| | (_| | | | | | | (_| |
// | .__/|_|  \__,_|\__, |_| |_| |_|\__,_|
// | |               __/ |
// |_|              |___/
//

PragmaDirective ::= pragma PragmaEntity PragmaSemVersion ';' { pin = 1 }
PragmaEntity ::= IDENTIFIER
PragmaSemVersion ::= PragmaSymbol? PragmaVersionNumber
PragmaSymbol ::= ( '^' | '>' | '>=' | '<' | '<=' | '=' )
PragmaVersionNumber ::= PRAGMA_VERSION


//  _                            _
// (_)                          | |
//  _ _ __ ___  _ __   ___  _ __| |_ ___
// | | '_ ` _ \| '_ \ / _ \| '__| __/ __|
// | | | | | | | |_) | (_) | |  | |_\__ \
// |_|_| |_| |_| .__/ \___/|_|   \__|___/
//             | |
//             |_|

ImportDirective ::= import (ImportSimple | ImportFrom | ImportComplex) ';' { pin = 1 }
ImportSimple ::= STRING_LITERAL (as IDENTIFIER)?
ImportFrom ::= ('*' | IDENTIFIER) (as IDENTIFIER)? from STRING_LITERAL
ImportComplex ::= '{' IDENTIFIER (as IDENTIFIER)? (',' IDENTIFIER (as IDENTIFIER)? )* '}' from STRING_LITERAL


//                  _                  _
//                 | |                | |
//   ___ ___  _ __ | |_ _ __ __ _  ___| |_
//  / __/ _ \| '_ \| __| '__/ _` |/ __| __|
// | (_| (_) | | | | |_| | | (_| | (__| |_
//  \___\___/|_| |_|\__|_|  \__,_|\___|\__|
//

ContractStructure ::= ContractDirective (is InheritanceSpecifier (',' InheritanceSpecifier)* )? '{' ContractContent* '}'
ContractDirective ::= (contract | library | interface) IDENTIFIER { pin = 1 }
InheritanceSpecifier ::= UserDefinedTypeName ('(' Expression (',' Expression)* ')' )?
ContractContent ::= ContractStateVariableDeclaration
    | UsingForDeclaration
    | StructDefinition
    | ModifierDefinition
    | FunctionDefinition
    | EventDefinition
    | EnumDefinition

ContractStateVariableDeclaration ::= TypeName ContractStateVariableVisibility* IDENTIFIER (ASSIGN Expression)? ';'
UsingForDeclaration ::= using IDENTIFIER for ('*' | TypeName) ';' { pin = 1 }
StructDefinition ::= struct IDENTIFIER '{' (VariableDeclaration ';' (VariableDeclaration ';')* ) '}' { pin = 1 }
ModifierDefinition ::= modifier IDENTIFIER ParameterList? Block { pin = 1 }
EnumDefinition ::= enum IDENTIFIER '{' EnumValue? (',' EnumValue)* '}' { pin = 1 }

FunctionDefinition ::= function IDENTIFIER? ParameterList
    (ModifierFunctionInvocation | FunctionStateMutability | external | public | internal | private)*
    (returns ParameterList)? (';' | Block) { pin = 1 }

ModifierFunctionInvocation ::= IDENTIFIER ( '(' ExpressionList? ')' )?

//  _
// | |
// | |_ _   _ _ __   ___  ___
// | __| | | | '_ \ / _ \/ __|
// | |_| |_| | |_) |  __/\__ \
//  \__|\__, | .__/ \___||___/
//       __/ | |
//      |___/|_|
//

TypeName ::= ElementTypeName | UserDefinedTypeName | MappingTypeName | ArrayTypeName | FunctionTypeName

private StringLiteral ::= STRING_LITERAL

BooleanLiteral ::= (true | false)
NumberLiteral ::= (HEX_NUMBER | DECIMAL_NUMBER) NumberUnit?
ElementTypeName ::= (address | bool | string | var | Integer | UnsignedInt | Bytes)
UserDefinedTypeName ::= IDENTIFIER ('.' IDENTIFIER)*
MappingTypeName ::= mapping '(' ElementTypeName '=>' TypeName ')' { pin = 1 }
ArrayTypeName ::= TypeName '[' Expression? ']'
FunctionTypeName ::= function FunctionTypeParameterList FunctionVisibility* (returns FunctionTypeParameterList)? { pin = 1 }

FunctionTypeParameterList ::= '(' (FunctionTypeParameter (',' FunctionTypeParameter)* )? ')'
FunctionTypeParameter ::= TypeName StorageLocation?

ParameterList ::= '(' (Parameter (',' Parameter)* )? ')'
Parameter ::= TypeName StorageLocation? (IDENTIFIER)?

Integer ::= (int | int8 | int16 | int24 | int32 | int40 | int48 | int56 | int64 | int72 | int80 | int88 | int96 | int104 | int112 | int120 | int128 | int136 | int144 | int152 | int160 | int168 | int176 | int184 | int192 | int200 | int208 | int216 | int224 | int232 | int240 | int248 | int256)
UnsignedInt ::= (uint | uint8 | uint16 | uint24 | uint32 | uint40 | uint48 | uint56 | uint64 | uint72 | uint80 | uint88 | uint96 | uint104 | uint112 | uint120 | uint128 | uint136 | uint144 | uint152 | uint160 | uint168 | uint176 | uint184 | uint192 | uint200 | uint208 | uint216 | uint224 | uint232 | uint240 | uint248 | uint256)
Bytes ::= (byte | bytes1 | bytes2 | bytes3 | bytes4 | bytes5 | bytes6 | bytes7 | bytes8 | bytes9 | bytes10 | bytes11 | bytes12 | bytes13 | bytes14 | bytes15 | bytes16 | bytes17 | bytes18 | bytes19 | bytes20 | bytes21 | bytes22 | bytes23 | bytes24 | bytes25 | bytes26 | bytes27 | bytes28 | bytes29 | bytes30 | bytes31 | bytes32)

VariableDefinition ::= (var IdentifierList | VariableDeclaration) ('=' Expression )?
IdentifierList ::= '(' (IDENTIFIER? ',' )* IDENTIFIER? ')'

EnumValue::= IDENTIFIER


//                                    _
//                                   (_)
//   _____  ___ __  _ __ ___  ___ ___ _  ___  _ __  ___
//  / _ \ \/ / '_ \| '__/ _ \/ __/ __| |/ _ \| '_ \/ __|
// |  __/>  <| |_) | | |  __/\__ \__ \ | (_) | | | \__ \
//  \___/_/\_\ .__/|_|  \___||___/___/_|\___/|_| |_|___/
//           | |
//           |_|
//

Expression ::= PostfixIncDecExpression
    | NewExpression
    | ArrayIndexExpression
    | MemberAccessExpression
    | FunctionCallExpression
    | ParenthesesExpression
    | PrefixIncDecExpression
    | UnaryPlusMinusExpression
    | UnaryOperationExpression
    | LogicalNotExpression
    | BitwiseNotExpression
    | ExponentiationExpression
    | MulDivModExpression
    | AddSubExpression
    | BitwiseShiftExpression
    | BitwiseAndExpression
    | BitwiseXorExpression
    | BitwiseOrExpression
    | InequalityExpression
    | EqualityExpression
    | LogicalAndExpression
    | LogicalOrExpression
    | TernaryExpression
    | AssignmentExpression
    | PrimaryExpression

ExpressionList ::= Expression (',' Expression)*

PostfixIncDecExpression ::= Expression (PLUS_PLUS | MINUS_MINUS)
NewExpression ::= new TypeName { pin = 1 }
ArrayIndexExpression ::= Expression '[' Expression? ']'
MemberAccessExpression ::= Expression '.' IDENTIFIER
FunctionCallExpression ::= Expression '(' FunctionCallArguments ')'
ParenthesesExpression ::= '(' Expression ')'
PrefixIncDecExpression ::= (PLUS_PLUS | MINUS_MINUS) Expression
UnaryPlusMinusExpression ::= Expression (PLUS | MINUS) Expression
UnaryOperationExpression ::= DELETE_OPERATOR Expression
LogicalNotExpression ::= NOT Expression
BitwiseNotExpression ::= TILDE Expression
ExponentiationExpression ::= Expression EXPONENT Expression
MulDivModExpression ::= Expression (MUL | QUOTIENT | REMAINDER) Expression
AddSubExpression ::= Expression (PLUS | MINUS) Expression
BitwiseShiftExpression ::= Expression (SHIFT_LEFT | SHIFT_RIGHT) Expression
BitwiseAndExpression ::= Expression BIT_AND Expression
BitwiseXorExpression ::= Expression BIT_XOR Expression
BitwiseOrExpression ::= Expression BIT_OR Expression
InequalityExpression ::= Expression (LESS | GREATER | LESS_OR_EQUAL | GREATER_OR_EQUAL) Expression
EqualityExpression ::= Expression (EQ | NOT_EQ) Expression
LogicalAndExpression ::= Expression (COND_AND) Expression
LogicalOrExpression ::= Expression (COND_OR) Expression
TernaryExpression ::= Expression '?' Expression ':' Expression
AssignmentExpression ::=
    Expression (ASSIGN
        | BIT_OR_ASSIGN
        | BIT_XOR_ASSIGN
        | BIT_AND_ASSIGN
        | SHIFT_LEFT_ASSIGN
        | SHIFT_RIGHT_ASSIGN
        | PLUS_ASSIGN
        | MINUS_ASSIGN
        | MUL_ASSIGN
        | QUOTIENT_ASSIGN
        | REMAINDER_ASSIGN)
    Expression
PrimaryExpression ::= BooleanLiteral
    | NumberLiteral
    | StringLiteral
    | TupleExpression
    | ElementTypeName
    | IDENTIFIER

TupleExpression ::= '(' (Expression? (',' Expression? )* )? ')'
    | '[' (Expression  (',' Expression)* )? ']'

FunctionalAssemblyExpression ::= IDENTIFIER '(' AssemblyItem? (',' AssemblyItem)* ')'


//   ___ ___  _ __ ___  _ __ ___   ___  _ __
//  / __/ _ \| '_ ` _ \| '_ ` _ \ / _ \| '_ \
// | (_| (_) | | | | | | | | | | | (_) | | | |
//  \___\___/|_| |_| |_|_| |_| |_|\___/|_| |_|
//

FunctionCallArguments ::= '{' NameValueList? '}' | ExpressionList?
NameValueList ::= IDENTIFIER ':' Expression (',' IDENTIFIER ':' Expression)*

NumberUnit ::= EtherUnits | TimeUnits
EtherUnits ::= (wei | finney | szabo | ether)
TimeUnits ::= (seconds | minutes | hours | days | weeks | years)

StorageLocation ::= (memory | storage)

FunctionVisibility ::= (internal | external | FunctionStateMutability)
FunctionStateMutability ::= (pure | constant | view | payable)

ContractStateVariableVisibility ::= (public | internal | private | constant)
VariableDeclaration ::= TypeName StorageLocation? IDENTIFIER

Block ::= '{' Statement* '}'
InlineAssemblyBlock ::= '{' AssemblyItem* '}'
AssemblyItem ::= IDENTIFIER
    | FunctionalAssemblyExpression
    | InlineAssemblyBlock
    | AssemblyLocalBinding
    | AssemblyAssignment
    | AssemblyLabel
    | NumberLiteral
    | STRING_LITERAL
    | HEX_NUMBER

AssemblyLocalBinding ::= let IDENTIFIER ':=' FunctionalAssemblyExpression
AssemblyAssignment ::= (IDENTIFIER ':=' FunctionalAssemblyExpression) | (':=' IDENTIFIER)
AssemblyLabel ::= IDENTIFIER ':'

//                       _
//                      | |
//   _____   _____ _ __ | |_ ___
//  / _ \ \ / / _ \ '_ \| __/ __|
// |  __/\ V /  __/ | | | |_\__ \
//  \___| \_/ \___|_| |_|\__|___/
//

EventDefinition ::= event IDENTIFIER EventParameterList (anonymous)? ';' { pin = 1 }
EventParameterList ::= '(' (EventParameter (',' EventParameter)* )? ')'
EventParameter ::= TypeName (indexed)? IDENTIFIER?


//      _        _                            _
//     | |      | |                          | |
//  ___| |_ __ _| |_ ___ _ __ ___   ___ _ __ | |_ ___
// / __| __/ _` | __/ _ \ '_ ` _ \ / _ \ '_ \| __/ __|
// \__ \ || (_| | ||  __/ | | | | |  __/ | | | |_\__ \
// |___/\__\__,_|\__\___|_| |_| |_|\___|_| |_|\__|___/
//

Statement ::= IfStatement
    | WhileStatement
    | ForStatement
    | Block
    | InlineAssemblyStatement
    | (DoWhileStatement
    | PlaceholderStatement
    | ContinueStatement
    | BreakStatement
    | ReturnStatement
    | ThrowStatement
    | EmitStatement
    | SimpleStatement) ';'

IfStatement ::= if '(' Expression ')' Statement (else Statement)? { pin = 1 }
WhileStatement ::= while '(' Expression ')' Statement { pin = 1 }
SimpleStatement ::= VariableDefinition | ExpressionStatement
ForStatement ::= for '(' (SimpleStatement)? ';' (Expression)? ';' (ExpressionStatement)? ')' Statement { pin = 1 }
ExpressionStatement ::= Expression
InlineAssemblyStatement ::= assembly STRING_LITERAL? InlineAssemblyBlock { pin = 1 }
DoWhileStatement ::= do '(' Statement while '(' Expression ')' { pin = 1 }
PlaceholderStatement ::= '_'
ContinueStatement ::= continue
BreakStatement ::= break
ReturnStatement ::= return Expression? { pin = 1 }
ThrowStatement ::= throw
EmitStatement ::= emit FunctionCallExpression { pin = 1 }
